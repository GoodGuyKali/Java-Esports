/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package esports;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DefaultRowSorter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;


/**
 *
 * @author L37TURNER
 */
enum game_type{
    Overwatch,
    CSGO,
    COD,
    Valorant,
    Apex,
    NotSet
}
class EventArray implements Serializable{
    game_type GameType;
    int eventNumber;
    long eventPoints;
    long eventScore;
    int eventPosistion;
    public EventArray(game_type typr){
        GameType = typr;
    }
    public void CalculateScore(javax.swing.JTable eventTable){
        //need to figure out the scoreing multiplier
        switch(GameType){
            case Overwatch:
                //this is all a test case, not a valid function!
                eventScore = eventPoints*10;
                eventTable.setValueAt(eventScore, eventTable.getSelectedRow(), 2);
                break;
            case CSGO:
                break;
            case COD:
                break;
            case Valorant:
                break;
            case Apex:
                break; 
        }
    }
}
class PlayerData implements Serializable{
    String playerName;
    public PlayerData(String name){
        playerName = name;
    }
}
class TeamArray implements Serializable{
    int scoreboardPos = 0;
    
    EventArray eventArray[] = new EventArray[6];
    ArrayList<PlayerData> playersData = new ArrayList<PlayerData>();

    String teamName;
    //this is to be implemented in a bit 
    String teamBio;
    boolean is_guest = false;
    
    public TeamArray(
            String Teamname,
            int size
    ){
        teamName = Teamname;
        for (int i =0;i < size; i++)
            eventArray[i]= new EventArray(game_type.NotSet);
    }
}


public class Esports_Frame extends javax.swing.JFrame {
    //sets up a array for all teams to be held into
    ArrayList<TeamArray> myTeamArray = new ArrayList<TeamArray>();
    /**
     * Creates new form ESports_Frame
     */
    public Esports_Frame() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        ScoreboardPane = new javax.swing.JTabbedPane();
        ScorePanel = new javax.swing.JPanel();
        ScoreScrollPane = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable();
        TeamPanel = new javax.swing.JPanel();
        IsGuest_checkbox = new javax.swing.JCheckBox();
        AddTeam_Button = new javax.swing.JButton();
        RemoveTeam_Button = new javax.swing.JButton();
        TeamComboBox = new javax.swing.JComboBox<>();
        TeamNameField1 = new javax.swing.JTextField();
        PlayerNameTextField = new javax.swing.JTextField();
        AddTeamPlayerButton = new javax.swing.JButton();
        RemoveTeamPlayerButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TeamPlayerList = new javax.swing.JList<>();
        SelectedTeamLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        LoadButton = new javax.swing.JButton();
        EventsPanel = new javax.swing.JPanel();
        SelectedEventCombo = new javax.swing.JComboBox<>();
        SelectedGameCombo = new javax.swing.JComboBox<>();
        Event_Label = new javax.swing.JLabel();
        EventsScrollPane = new javax.swing.JScrollPane();
        EventTable = new javax.swing.JTable();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ScoreboardPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ScoreboardPaneStateChanged(evt);
            }
        });

        scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Team Name", "Event 1", "Event 2", "Event 3", "Event 4", "Event 5", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scoreTable.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        scoreTable.setName(""); // NOI18N
        ScoreScrollPane.setViewportView(scoreTable);

        javax.swing.GroupLayout ScorePanelLayout = new javax.swing.GroupLayout(ScorePanel);
        ScorePanel.setLayout(ScorePanelLayout);
        ScorePanelLayout.setHorizontalGroup(
            ScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ScorePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScoreScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                .addContainerGap())
        );
        ScorePanelLayout.setVerticalGroup(
            ScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ScorePanelLayout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(ScoreScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );

        ScoreboardPane.addTab("Scoreboard", ScorePanel);

        IsGuest_checkbox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        IsGuest_checkbox.setText("Is Guest Team?");
        IsGuest_checkbox.setMaximumSize(new java.awt.Dimension(69, 20));
        IsGuest_checkbox.setMinimumSize(new java.awt.Dimension(69, 20));

        AddTeam_Button.setText("Add Team");
        AddTeam_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTeam_ButtonActionPerformed(evt);
            }
        });

        RemoveTeam_Button.setText("Remove Selected Team");
        RemoveTeam_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveTeam_ButtonActionPerformed(evt);
            }
        });

        TeamComboBox.setModel(new javax.swing.DefaultComboBoxModel<>());
        TeamComboBox.setToolTipText("bonk");
        TeamComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TeamComboBoxActionPerformed(evt);
            }
        });

        TeamNameField1.setText("Team Name");
        TeamNameField1.addKeyListener(new KeyAdapter(){
            @Override
            //this is to stop the typer making their name stupidly long
            public void keyTyped(KeyEvent e){
                if(TeamNameField1.getText().length() >= 24)
                e.consume();
            }
        });
        TeamNameField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TeamNameField1MouseClicked(evt);
            }
        });
        TeamNameField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TeamNameField1ActionPerformed(evt);
            }
        });

        PlayerNameTextField.setText("Player Name");
        PlayerNameTextField.addKeyListener(new KeyAdapter(){
            @Override
            //this is to stop the typer making their name stupidly long
            public void keyTyped(KeyEvent e){
                if(PlayerNameTextField.getText().length() >= 24)
                e.consume();
            }
        });
        PlayerNameTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PlayerNameTextFieldMouseClicked(evt);
            }
        });
        PlayerNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerNameTextFieldActionPerformed(evt);
            }
        });

        AddTeamPlayerButton.setText("Add Player");
        AddTeamPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTeamPlayerButtonActionPerformed(evt);
            }
        });

        RemoveTeamPlayerButton.setText("Remove Selected Player");
        RemoveTeamPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveTeamPlayerButtonActionPerformed(evt);
            }
        });

        TeamPlayerList.setModel(new DefaultListModel()
        );
        jScrollPane1.setViewportView(TeamPlayerList);

        SelectedTeamLabel.setText("Selected Team");

        saveButton.setText("Save Data");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        LoadButton.setText("Load Data");
        LoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TeamPanelLayout = new javax.swing.GroupLayout(TeamPanel);
        TeamPanel.setLayout(TeamPanelLayout);
        TeamPanelLayout.setHorizontalGroup(
            TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeamPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TeamPanelLayout.createSequentialGroup()
                        .addGroup(TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TeamNameField1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddTeam_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IsGuest_checkbox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TeamPanelLayout.createSequentialGroup()
                                .addComponent(saveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(LoadButton)))
                        .addGap(18, 18, 18)
                        .addGroup(TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(TeamPanelLayout.createSequentialGroup()
                                .addComponent(TeamComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2))
                            .addComponent(RemoveTeam_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(TeamPanelLayout.createSequentialGroup()
                        .addComponent(SelectedTeamLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TeamPanelLayout.createSequentialGroup()
                        .addGroup(TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(TeamPanelLayout.createSequentialGroup()
                                .addGroup(TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(AddTeamPlayerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                                    .addComponent(PlayerNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RemoveTeamPlayerButton)))
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );
        TeamPanelLayout.setVerticalGroup(
            TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TeamPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TeamComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TeamNameField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IsGuest_checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddTeam_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(RemoveTeam_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LoadButton)
                        .addComponent(saveButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SelectedTeamLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(PlayerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(TeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddTeamPlayerButton)
                    .addComponent(RemoveTeamPlayerButton))
                .addGap(16, 16, 16))
        );

        TeamComboBox.getAccessibleContext().setAccessibleDescription("");

        ScoreboardPane.addTab("Teams", TeamPanel);

        EventsPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EventsPanelMouseClicked(evt);
            }
        });

        SelectedEventCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Event 1", "Event 2", "Event 3", "Event 4", "Event 5" }));
        SelectedEventCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectedEventComboActionPerformed(evt);
            }
        });

        ArrayList<String> events = new ArrayList<String>();
        for (game_type type : game_type.values()){
            events.add(type.toString());

        }
        SelectedGameCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new Vector<String>(events)));
        //5 is the iindex for NotSet
        //this shows the user that by defualt nothing is set so this is what i want for the time being until i start to clean up code
        SelectedGameCombo.setSelectedIndex(5);
        SelectedGameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectedGameComboActionPerformed(evt);
            }
        });

        Event_Label.setText("Event");

        EventTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Team", "Points", "Score", "Position"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        EventTable.getTableHeader().setReorderingAllowed(false);
        EventTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                EventTablePropertyChange(evt);
            }
        });
        EventsScrollPane.setViewportView(EventTable);

        javax.swing.GroupLayout EventsPanelLayout = new javax.swing.GroupLayout(EventsPanel);
        EventsPanel.setLayout(EventsPanelLayout);
        EventsPanelLayout.setHorizontalGroup(
            EventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EventsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EventsPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(EventsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Event_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(EventsPanelLayout.createSequentialGroup()
                        .addComponent(SelectedEventCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(184, 184, 184)
                        .addComponent(SelectedGameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        EventsPanelLayout.setVerticalGroup(
            EventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EventsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SelectedEventCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectedGameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Event_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EventsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108))
        );

        ScoreboardPane.addTab("Events", EventsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ScoreboardPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ScoreboardPane, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        ScoreboardPane.getAccessibleContext().setAccessibleName("ScoreboardPane");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void PostTeamData(){
        int amount = TeamComboBox.getItemCount();
        if(!TeamNameField1.getText().isEmpty()){
           // myTeamArray.
            for(TeamArray checkName : myTeamArray){
                if(checkName.teamName.equals(TeamNameField1.getText()))
                    return;
            }              
            myTeamArray.add(amount, new TeamArray(TeamNameField1.getText(),SelectedEventCombo.getItemCount()));
            myTeamArray.get(amount).is_guest = IsGuest_checkbox.isSelected();
            TeamComboBox.addItem(myTeamArray.get(amount).teamName);
            TeamComboBox.setSelectedIndex(amount);
            javax.swing.table.DefaultTableModel test = (javax.swing.table.DefaultTableModel)EventTable.getModel();
            test.addRow(new Object[]{myTeamArray.get(amount).teamName});
            TeamNameField1.setText("");
        }
        else{
            System.out.println("please enter text");
        }
    }
    
    //created a function since we have it in two functions to allow the abilty to add players via enter or by pressing the button
    private void postPlayerNameData(){
        int amount = TeamPlayerList.getModel().getSize();
        if(amount < 5)
            if(!PlayerNameTextField.getText().isEmpty()){
                myTeamArray.get(TeamComboBox.getSelectedIndex()).playersData.add(amount,new PlayerData(PlayerNameTextField.getText()));
                DefaultListModel ListModel = (DefaultListModel)TeamPlayerList.getModel();
                ListModel.addElement(myTeamArray.get(TeamComboBox.getSelectedIndex()).playersData.get(amount).playerName);
                TeamPlayerList.setSelectedIndex(amount);
            }       
        PlayerNameTextField.setText("");
    }
    
    //will wipe the file and overwrite it
    private void SaveData(String FileName){
        try{
            FileOutputStream fileout = new FileOutputStream(FileName);
            ObjectOutputStream objectout = new ObjectOutputStream(fileout);
            objectout.writeObject(myTeamArray);
        }
        catch(Exception e){}
    }
    //
    private void LoadData(String FileName){
        try {
            FileInputStream in = new FileInputStream(FileName);
            ObjectInputStream is = new ObjectInputStream(in);
            ArrayList<TeamArray> SavedTeamArray = new ArrayList<TeamArray>();
            SavedTeamArray=(ArrayList<TeamArray>)is.readObject();
            myTeamArray.clear();
            myTeamArray = SavedTeamArray;
            for(int amount = 0;amount < myTeamArray.size();amount++){
                TeamComboBox.addItem(myTeamArray.get(amount).teamName);
                TeamComboBox.setSelectedIndex(amount);
                javax.swing.table.DefaultTableModel test = (javax.swing.table.DefaultTableModel)EventTable.getModel();
                test.addRow(new Object[]{myTeamArray.get(amount).teamName}); 
                //TeamNameField1.setText("");
            }
        }catch(Exception e){}
    }
    
    
    private void SelectedEventComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectedEventComboActionPerformed
        String Selected_event = (String)SelectedEventCombo.getSelectedItem();
        Event_Label.setText(Selected_event);
        //this is because we only need to use one of the teams data since all of the teams game type gets set either way
        SelectedGameCombo.setSelectedIndex(myTeamArray.get(0).eventArray[SelectedEventCombo.getSelectedIndex()].GameType.ordinal());

        System.out.println(myTeamArray.get(0).eventArray[SelectedEventCombo.getSelectedIndex()].GameType);
        EventArray TestCase;
        for(int i = 0; i < myTeamArray.size();i++){
            TestCase = myTeamArray.get(i).eventArray[SelectedEventCombo.getSelectedIndex()];
            EventTable.setValueAt(TestCase.eventPoints, i, 1);        
            EventTable.setValueAt(TestCase.eventScore, i, 2);        
            EventTable.setValueAt(TestCase.eventPosistion, i, 3);        
        }      
    }//GEN-LAST:event_SelectedEventComboActionPerformed

    private void RemoveTeam_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveTeam_ButtonActionPerformed
        int selected = TeamComboBox.getSelectedIndex();
        if(selected >= 0){
            TeamComboBox.removeItemAt(selected);
            myTeamArray.remove(selected);
            javax.swing.table.DefaultTableModel test = (javax.swing.table.DefaultTableModel)EventTable.getModel();
            test.removeRow(selected);
         }
        
    }//GEN-LAST:event_RemoveTeam_ButtonActionPerformed

    private void TeamComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TeamComboBoxActionPerformed
         int selected = TeamComboBox.getSelectedIndex();
         //checks if ive just removed a team and now its null
         if(selected >= 0){
             IsGuest_checkbox.setSelected(myTeamArray.get(selected).is_guest);
             SelectedTeamLabel.setText(myTeamArray.get(selected).teamName+"'s Players");
             DefaultListModel ListModel = (DefaultListModel)TeamPlayerList.getModel();
             ListModel.clear();
             if(myTeamArray.get(selected).playersData.size() > 0)
                 for(int i = 0; i < myTeamArray.get(selected).playersData.size(); i++)
                     ListModel.addElement(myTeamArray.get(selected).playersData.get(i).playerName);
         }
    }//GEN-LAST:event_TeamComboBoxActionPerformed

    private void AddTeam_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTeam_ButtonActionPerformed
        PostTeamData();
    }//GEN-LAST:event_AddTeam_ButtonActionPerformed

    private void SelectedGameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectedGameComboActionPerformed
        int Selected_Game = SelectedGameCombo.getSelectedIndex();      
        for (game_type type : game_type.values())
            if(type.ordinal() == Selected_Game)
                 for(int i = 0;i < myTeamArray.size();i++) 
                    myTeamArray.get(i).eventArray[SelectedEventCombo.getSelectedIndex()].GameType = type;    
       
       /*
       DefaultRowSorter sorter = ((DefaultRowSorter)EventTable.getRowSorter());

       ArrayList list = new ArrayList();
       list.add(new RowSorter.SortKey(2,SortOrder.DESCENDING) );
       sorter.setSortKeys(list);
       sorter.sort();
        /*
                int winnerIndex;
         ArrayList<int> sortingpoints = new ArrayList<int>();
        for(int j =0;j < myTeamArray.size();j++){

            points = myTeamArray.get(j).eventArray[SelectedEventCombo.getSelectedIndex()].eventPoints;
            
        }
        */

       
    }//GEN-LAST:event_SelectedGameComboActionPerformed

    private void EventsPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EventsPanelMouseClicked
    }//GEN-LAST:event_EventsPanelMouseClicked
    private void ScoreboardPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ScoreboardPaneStateChanged
        //in here i might add auto updating to a extent
        if(ScoreboardPane.getSelectedIndex() == 0){
            javax.swing.table.DefaultTableModel test = (javax.swing.table.DefaultTableModel)scoreTable.getModel();
            for(int i = 0; i < myTeamArray.size();i++){
                if(i >= scoreTable.getRowCount()){
                    test.addRow(new Object[]{myTeamArray.get(i).teamName,
                        myTeamArray.get(i).eventArray[0].eventScore,
                        myTeamArray.get(i).eventArray[1].eventScore,
                        myTeamArray.get(i).eventArray[2].eventScore,
                        myTeamArray.get(i).eventArray[3].eventScore,
                        myTeamArray.get(i).eventArray[4].eventScore,
                        1
                    });
                }
                else{
                  scoreTable.setValueAt(myTeamArray.get(i).teamName, i, 0);
                }
            }
        }
        else if(ScoreboardPane.getSelectedIndex() == 2){
            String Selected_event = (String)SelectedEventCombo.getSelectedItem();
            Event_Label.setText(Selected_event);            
        }       
    }//GEN-LAST:event_ScoreboardPaneStateChanged

    private void EventTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_EventTablePropertyChange
        int SelectedIndex = SelectedEventCombo.getSelectedIndex (),
            SelectedRow   = EventTable        .getSelectedRow(),
            SelectedColum = EventTable        .getSelectedColumn(),
            ColumCount    = EventTable        .getColumnCount   (),
            RowCount      = EventTable        .getRowCount      ()
        ;
        if(ColumCount > 0 && RowCount > 0){
            if(EventTable.getValueAt(SelectedRow, SelectedColum) != null 
                && SelectedColum == 1){
                myTeamArray.get(SelectedRow).eventArray[SelectedIndex].eventPoints = (long)EventTable.getValueAt(SelectedRow, SelectedColum);
                myTeamArray.get(SelectedRow).eventArray[SelectedIndex].CalculateScore(EventTable);
            } 
        }
    }//GEN-LAST:event_EventTablePropertyChange

    
    private void PlayerNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayerNameTextFieldActionPerformed
        postPlayerNameData();
    }//GEN-LAST:event_PlayerNameTextFieldActionPerformed

    private void AddTeamPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTeamPlayerButtonActionPerformed
        postPlayerNameData();       
    }//GEN-LAST:event_AddTeamPlayerButtonActionPerformed

    private void TeamNameField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TeamNameField1MouseClicked
        TeamNameField1.setText("");
    }//GEN-LAST:event_TeamNameField1MouseClicked

    private void RemoveTeamPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveTeamPlayerButtonActionPerformed
        int selectedTeam = TeamComboBox.getSelectedIndex();
        if(selectedTeam == -1){
            System.out.println("please select a player");
        }
        else if(selectedTeam >= 0){
            DefaultListModel ListModel = (DefaultListModel)TeamPlayerList.getModel();
            ListModel.removeElementAt(TeamPlayerList.getSelectedIndex());
            myTeamArray.get(TeamComboBox.getSelectedIndex()).playersData.remove(0);
        }
    }//GEN-LAST:event_RemoveTeamPlayerButtonActionPerformed


    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        SaveData("Data.dat");
    }//GEN-LAST:event_saveButtonActionPerformed

    private void TeamNameField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TeamNameField1ActionPerformed
       PostTeamData();
    }//GEN-LAST:event_TeamNameField1ActionPerformed

    private void PlayerNameTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PlayerNameTextFieldMouseClicked
        PlayerNameTextField.setText("");
    }//GEN-LAST:event_PlayerNameTextFieldMouseClicked

    private void LoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadButtonActionPerformed
        LoadData("Data.dat");
    }//GEN-LAST:event_LoadButtonActionPerformed

        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        //sets the look and feel
         try {
                javax.swing.UIManager.setLookAndFeel("com.formdev.flatlaf.FlatDarkLaf");
            } catch (Exception e) {
                e.printStackTrace();
            }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Esports_Frame().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddTeamPlayerButton;
    private javax.swing.JButton AddTeam_Button;
    private javax.swing.JTable EventTable;
    private javax.swing.JLabel Event_Label;
    private javax.swing.JPanel EventsPanel;
    private javax.swing.JScrollPane EventsScrollPane;
    private javax.swing.JCheckBox IsGuest_checkbox;
    private javax.swing.JButton LoadButton;
    private javax.swing.JTextField PlayerNameTextField;
    private javax.swing.JButton RemoveTeamPlayerButton;
    private javax.swing.JButton RemoveTeam_Button;
    private javax.swing.JPanel ScorePanel;
    private javax.swing.JScrollPane ScoreScrollPane;
    private javax.swing.JTabbedPane ScoreboardPane;
    private javax.swing.JComboBox<String> SelectedEventCombo;
    private javax.swing.JComboBox<String> SelectedGameCombo;
    private javax.swing.JLabel SelectedTeamLabel;
    private javax.swing.JComboBox<String> TeamComboBox;
    private javax.swing.JTextField TeamNameField1;
    private javax.swing.JPanel TeamPanel;
    private javax.swing.JList<String> TeamPlayerList;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable scoreTable;
    // End of variables declaration//GEN-END:variables
}


//serialization test case


        /*
        ArrayList<byte[]> list = new ArrayList<byte[]>();
        try{
            for(int i =0;i<myTeamArray.size();i++){
                System.out.println("called");
                TeamArray obj = myTeamArray.get(i);
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                ObjectOutputStream oos = new ObjectOutputStream(bos);
                oos.writeObject(obj);
                oos.flush();
                list.add(bos.toByteArray());
            }
        }
        catch(Exception e){
            System.out.println(e);
        }
        try (FileOutputStream stream = new FileOutputStream("hi")) {

             for(int i = 0 ; i < list.size();i++){
                 stream.write(list.get(i));
             }
            } catch (IOException ex) {
                Logger.getLogger(Esports_Frame.class.getName()).log(Level.SEVERE, null, ex);
            }   
        try {
            byte[] array = Files.readAllBytes(Paths.get("\\\\CCNSAN01\\Data\\l37turner\\My Documents\\programming\\NetBeansProjects\\esports\\hi"));
            for(int b=0;b < array.length;b++){
                System.out.println(array[b]);
            }
            /*
            ByteArrayInputStream in = new ByteArrayInputStream(data);
            ObjectInputStream is = null;
            try {
            is = new ObjectInputStream(in);
            } catch (IOException ex) {
            Logger.getLogger(Esports_Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
            TeamArray object = (TeamArray)is.readObject();
            System.out.println(object.eventArray[0].GameType);
            } catch (IOException ex) {
            Logger.getLogger(Esports_Frame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(Esports_Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
            

            
        } catch (IOException ex) {
            Logger.getLogger(Esports_Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        */
