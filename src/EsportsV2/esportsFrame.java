/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EsportsV2;

import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.UnsupportedLookAndFeelException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

enum game_type{
    Overwatch,
    CSGO,
    COD,
    Valorant,
    Apex,
    NotSet
}
class EventArray implements Serializable{
    game_type GameType;
    long eventPoints;
    long eventScore;
    public EventArray(game_type typr){
        GameType = typr;
    }
    public void calculateScore(javax.swing.JTable eventTable){
        //these multipliers i would recomend that the esports organisers
        //mess with them until they find ones that they like
        //or i may add a config file holding multipliers
        switch(GameType){
            case Overwatch:
                eventScore = eventPoints*6;
                eventTable.setValueAt(eventScore, eventTable.getSelectedRow(), 2);
                break;
            case CSGO:
                eventScore = eventPoints*2;
                eventTable.setValueAt(eventScore, eventTable.getSelectedRow(), 2);
                break;
            case COD:
                eventScore = eventPoints*5;
                eventTable.setValueAt(eventScore, eventTable.getSelectedRow(), 2);
                break;
            case Valorant:
                eventScore = eventPoints*3;
                eventTable.setValueAt(eventScore, eventTable.getSelectedRow(), 2);
                break;
            case Apex:
                eventScore = eventPoints*20;
                eventTable.setValueAt(eventScore, eventTable.getSelectedRow(), 2);
                break; 
        }
    }
}

class PlayerData implements Serializable{
    String playerName;
    public PlayerData(String name){
        playerName = name;
    }
}
class TeamClass implements Serializable{
    int scoreboardPos = 0;
    int overallScore=0;
    EventArray eventArray[] = new EventArray[5];
    ArrayList<PlayerData> playersData = new ArrayList<>();
    String teamName;
    String teamBio;
    boolean is_guest = false;
    
    public TeamClass(String Teamname){
        teamName = Teamname;
        for (int i =0;i < eventArray.length; i++){
            eventArray[i]= new EventArray(game_type.NotSet);
        }
    }
    public long calculateOverallScore(){
        int tmp=0;
        for(EventArray event : eventArray){
           tmp+= event.eventScore;
            overallScore= tmp;
        }
        return overallScore;
    }

}

/**
 *
 * @author l37turner
 */
public class esportsFrame extends javax.swing.JFrame {
    ArrayList<TeamClass> myTeamArray = new ArrayList<>();

    /**
     *
     */
    public void updateAllOverallScores(){
        for(TeamClass test : myTeamArray){
            if(!test.is_guest){
                test.calculateOverallScore();
            }
        }
    }


    /**
     * Creates new form NewJFrame
     */
    public esportsFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane2 = new javax.swing.JLayeredPane();
        scorePanel = new javax.swing.JPanel();
        ScoreScrollPane = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        calculateWinnerButton = new javax.swing.JButton();
        eventsPanel = new javax.swing.JPanel();
        selectedEventCombo = new javax.swing.JComboBox<>();
        selectedGameCombo = new javax.swing.JComboBox<>();
        eventLabel = new javax.swing.JLabel();
        eventsScrollPane = new javax.swing.JScrollPane();
        eventTable = new javax.swing.JTable();
        teamPanel = new javax.swing.JPanel();
        isGuestCheckbox = new javax.swing.JCheckBox();
        addTeamButton = new javax.swing.JButton();
        removeTeamButton = new javax.swing.JButton();
        teamComboBox = new javax.swing.JComboBox<>();
        teamNameField = new javax.swing.JTextField();
        playerNameTextField = new javax.swing.JTextField();
        addTeamPlayerButton = new javax.swing.JButton();
        removeTeamPlayerButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        teamPlayerList = new javax.swing.JList<>();
        selectedTeamLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        editBioTextArea = new javax.swing.JTextArea();
        bioLabel = new javax.swing.JLabel();
        teamInfoPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        scoreboardMenu = new javax.swing.JMenu();
        teamsMenu = new javax.swing.JMenu();
        viewTeamDataItem = new javax.swing.JMenuItem();
        editTeamDataItem = new javax.swing.JMenuItem();
        eventMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane2.setEnabled(false);
        jLayeredPane2.setPreferredSize(new java.awt.Dimension(507, 364));

        scoreTable.setAutoCreateRowSorter(true);
        scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Team", "Event 1", "Event 2", "Event 3", "Event 4", "Event 5", "Total", "Posistion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scoreTable.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        scoreTable.setName(""); // NOI18N
        scoreTable.getTableHeader().setReorderingAllowed(false);
        ScoreScrollPane.setViewportView(scoreTable);

        jLabel2.setText("jLabel2");
        jLabel2.setDoubleBuffered(true);

        calculateWinnerButton.setText("Calculate Winner");
        calculateWinnerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateWinnerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scorePanelLayout = new javax.swing.GroupLayout(scorePanel);
        scorePanel.setLayout(scorePanelLayout);
        scorePanelLayout.setHorizontalGroup(
            scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scorePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScoreScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scorePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(calculateWinnerButton))
                    .addGroup(scorePanelLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 282, Short.MAX_VALUE)))
                .addContainerGap())
        );
        scorePanelLayout.setVerticalGroup(
            scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scorePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(ScoreScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(calculateWinnerButton)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        eventsPanel.setMinimumSize(new java.awt.Dimension(84, 97));
        eventsPanel.setPreferredSize(new java.awt.Dimension(507, 388));

        selectedEventCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Event 1", "Event 2", "Event 3", "Event 4", "Event 5" }));
        selectedEventCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedEventComboActionPerformed(evt);
            }
        });

        ArrayList<String> events = new ArrayList<String>();
        for (game_type type : game_type.values()){
            events.add(type.toString());

        }
        selectedGameCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new Vector<String>(events)));
        //5 is the iindex for NotSet
        //this shows the user that by defualt nothing is set so this is what i want for the time being until i start to clean up code
        selectedGameCombo.setSelectedIndex(5);
        selectedGameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedGameComboActionPerformed(evt);
            }
        });

        eventLabel.setText("Event");

        eventTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Team", "Points", "Score"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        eventTable.getTableHeader().setReorderingAllowed(false);
        eventTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                eventTablePropertyChange(evt);
            }
        });
        eventsScrollPane.setViewportView(eventTable);

        javax.swing.GroupLayout eventsPanelLayout = new javax.swing.GroupLayout(eventsPanel);
        eventsPanel.setLayout(eventsPanelLayout);
        eventsPanelLayout.setHorizontalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(eventsPanelLayout.createSequentialGroup()
                        .addGroup(eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eventLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(eventsPanelLayout.createSequentialGroup()
                                .addComponent(selectedEventCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(184, 184, 184)
                                .addComponent(selectedGameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 103, Short.MAX_VALUE))
                    .addComponent(eventsScrollPane, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        eventsPanelLayout.setVerticalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedEventCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectedGameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(eventLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108))
        );

        isGuestCheckbox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        isGuestCheckbox.setText("Is Guest Team?");
        isGuestCheckbox.setMaximumSize(new java.awt.Dimension(69, 20));
        isGuestCheckbox.setMinimumSize(new java.awt.Dimension(69, 20));

        addTeamButton.setText("Add Team");
        addTeamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTeamButtonActionPerformed(evt);
            }
        });

        removeTeamButton.setText("Remove Selected Team");
        removeTeamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTeamButtonActionPerformed(evt);
            }
        });

        teamComboBox.setModel(new javax.swing.DefaultComboBoxModel<>());
        teamComboBox.setToolTipText("Selected team to edit");
        teamComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamComboBoxActionPerformed(evt);
            }
        });

        teamNameField.setText("Team Name");
        teamNameField.addKeyListener(new KeyAdapter(){
            @Override
            //this is to stop the typer making their name stupidly long
            public void keyTyped(KeyEvent e){
                if(teamNameField.getText().length() >= 24)
                e.consume();
            }
        });
        teamNameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                teamNameFieldMouseClicked(evt);
            }
        });
        teamNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamNameFieldActionPerformed(evt);
            }
        });

        playerNameTextField.setText("Player Name");
        playerNameTextField.addKeyListener(new KeyAdapter(){
            @Override
            //this is to stop the typer making their name stupidly long
            public void keyTyped(KeyEvent e){
                if(playerNameTextField.getText().length() >= 24)
                e.consume();
            }
        });
        playerNameTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerNameTextFieldMouseClicked(evt);
            }
        });
        playerNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerNameTextFieldActionPerformed(evt);
            }
        });

        addTeamPlayerButton.setText("Add Player");
        addTeamPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTeamPlayerButtonActionPerformed(evt);
            }
        });

        removeTeamPlayerButton.setText("Remove  Player");
        removeTeamPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTeamPlayerButtonActionPerformed(evt);
            }
        });

        teamPlayerList.setModel(new DefaultListModel()
        );
        jScrollPane1.setViewportView(teamPlayerList);

        selectedTeamLabel.setText("Selected Team");

        saveButton.setText("Save Data");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load Data");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        editBioTextArea.setColumns(20);
        editBioTextArea.setRows(5);
        editBioTextArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                editBioTextAreaFocusLost(evt);
            }
        });
        jScrollPane4.setViewportView(editBioTextArea);

        bioLabel.setText("Selected Teams' Bio");

        javax.swing.GroupLayout teamPanelLayout = new javax.swing.GroupLayout(teamPanel);
        teamPanel.setLayout(teamPanelLayout);
        teamPanelLayout.setHorizontalGroup(
            teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teamPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teamPanelLayout.createSequentialGroup()
                        .addGroup(teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(teamNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addTeamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(isGuestCheckbox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teamPanelLayout.createSequentialGroup()
                                .addComponent(saveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(loadButton)))
                        .addGap(18, 18, 18)
                        .addGroup(teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(teamPanelLayout.createSequentialGroup()
                                .addComponent(teamComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2))
                            .addComponent(removeTeamButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(teamPanelLayout.createSequentialGroup()
                        .addComponent(addTeamPlayerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeTeamPlayerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(teamPanelLayout.createSequentialGroup()
                        .addGroup(teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(selectedTeamLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playerNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bioLabel))))
                .addContainerGap())
        );
        teamPanelLayout.setVerticalGroup(
            teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teamPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teamNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(isGuestCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addTeamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(removeTeamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(loadButton)
                        .addComponent(saveButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectedTeamLabel)
                    .addComponent(bioLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(teamPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(playerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(teamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeTeamPlayerButton)
                    .addComponent(addTeamPlayerButton))
                .addGap(15, 15, 15))
        );

        javax.swing.tree.DefaultMutableTreeNode TeamRootNode = new javax.swing.tree.DefaultMutableTreeNode("Teams");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(TeamRootNode));
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jTree1);

        jLabel1.setText("Team List");

        jScrollPane3.setEnabled(false);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout teamInfoPanelLayout = new javax.swing.GroupLayout(teamInfoPanel);
        teamInfoPanel.setLayout(teamInfoPanelLayout);
        teamInfoPanelLayout.setHorizontalGroup(
            teamInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teamInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teamInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        teamInfoPanelLayout.setVerticalGroup(
            teamInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teamInfoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teamInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );

        jLayeredPane2.setLayer(scorePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(eventsPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(teamPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(teamInfoPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane2Layout.createSequentialGroup()
                    .addComponent(eventsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane2Layout.createSequentialGroup()
                    .addComponent(teamPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addComponent(scorePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(teamInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(eventsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(teamPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(scorePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(teamInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        scoreboardMenu.setText("Scoreboard");
        scoreboardMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scoreboardMenuMouseClicked(evt);
            }
        });
        jMenuBar2.add(scoreboardMenu);

        teamsMenu.setText("Teams");

        viewTeamDataItem.setText("View Team Data");
        viewTeamDataItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewTeamDataItemMouseClicked(evt);
            }
        });
        viewTeamDataItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTeamDataItemActionPerformed(evt);
            }
        });
        teamsMenu.add(viewTeamDataItem);

        editTeamDataItem.setText("Edit Team Data");
        editTeamDataItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTeamDataItemActionPerformed(evt);
            }
        });
        teamsMenu.add(editTeamDataItem);

        jMenuBar2.add(teamsMenu);

        eventMenu.setText("Events");
        eventMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eventMenuMouseClicked(evt);
            }
        });
        jMenuBar2.add(eventMenu);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PostTeamData(){
        int amount = teamComboBox.getItemCount();
        if(!teamNameField.getText().isEmpty()){
            for(TeamClass checkName : myTeamArray){
                if(checkName.teamName.equals(teamNameField.getText())){
                    return;
                }
            }            
            myTeamArray.add(amount, new TeamClass(teamNameField.getText()));
            myTeamArray.get(amount).is_guest = isGuestCheckbox.isSelected();
            teamComboBox.addItem(myTeamArray.get(amount).teamName);
            teamComboBox.setSelectedIndex(amount);
            javax.swing.table.DefaultTableModel test = (javax.swing.table.DefaultTableModel)eventTable.getModel();
            test.addRow(new Object[]{myTeamArray.get(amount).teamName});
            teamNameField.setText("");
        }
        else{
            System.out.println("please enter text");
        }
    }
    
    //created a function since we have it in two functions to allow the abilty to add players via enter or by pressing the button
    private void postPlayerNameData(){
        int amount = teamPlayerList.getModel().getSize();
        if(amount < 5){
            if(!playerNameTextField.getText().isEmpty()){
                myTeamArray.get(teamComboBox.getSelectedIndex()).playersData.add(amount,new PlayerData(playerNameTextField.getText()));
                DefaultListModel ListModel = (DefaultListModel)teamPlayerList.getModel();
                ListModel.addElement(myTeamArray.get(teamComboBox.getSelectedIndex()).playersData.get(amount).playerName);
                teamPlayerList.setSelectedIndex(amount);
            }   
        }
        playerNameTextField.setText("");
    }
   
    //will wipe the file and overwrite it
    private void SaveData(String FileName){
        try{
            FileOutputStream fileout = new FileOutputStream(FileName);
            ObjectOutputStream objectout = new ObjectOutputStream(fileout);
            objectout.writeObject(myTeamArray);
            objectout.close();
            fileout.close();
        }
        catch(Exception e){}
    }
    
    private void LoadData(String FileName){
        try {
            FileInputStream in = new FileInputStream(FileName);
            ObjectInputStream is = new ObjectInputStream(in);
            myTeamArray.clear();
            teamComboBox.removeAllItems();
            myTeamArray = (ArrayList<TeamClass>)is.readObject();
            for(int amount = 0;amount < myTeamArray.size();amount++){
                teamComboBox.addItem(myTeamArray.get(amount).teamName);
                teamComboBox.setSelectedIndex(amount);
                javax.swing.table.DefaultTableModel tableModel = (javax.swing.table.DefaultTableModel)eventTable.getModel();
                tableModel.addRow(new Object[]{myTeamArray.get(amount).teamName}); 
            }
            in.close();
            is.close();
            
        }catch(Exception e){
            System.out.println(e.getStackTrace());
        }
    }
    
    //remove
    private void viewTeamDataItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewTeamDataItemMouseClicked

    }//GEN-LAST:event_viewTeamDataItemMouseClicked

    private void viewTeamDataItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTeamDataItemActionPerformed
        eventsPanel.setVisible(false);
        scorePanel.setVisible(false);
        teamPanel.setVisible(false);
        teamInfoPanel.setVisible(true);
        javax.swing.tree.DefaultMutableTreeNode TeamRootNode = new javax.swing.tree.DefaultMutableTreeNode("Teams");
        for(int i = 0; i < myTeamArray.size();i++){
            javax.swing.tree.DefaultMutableTreeNode teamDataNode = new javax.swing.tree.DefaultMutableTreeNode(myTeamArray.get(i).teamName);
            for(PlayerData PlayersData : myTeamArray.get(i).playersData ){
                javax.swing.tree.DefaultMutableTreeNode PlayerName = new javax.swing.tree.DefaultMutableTreeNode(PlayersData.playerName);
                teamDataNode.add(PlayerName);
            }
            TeamRootNode.add(teamDataNode);
        }
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(TeamRootNode));
    }//GEN-LAST:event_viewTeamDataItemActionPerformed

    private void selectedEventComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedEventComboActionPerformed
        String Selected_event = (String)selectedEventCombo.getSelectedItem();
        eventLabel.setText(Selected_event);
        selectedGameCombo.setSelectedIndex(myTeamArray.get(0).eventArray[selectedEventCombo.getSelectedIndex()].GameType.ordinal());

        EventArray TestCase;
        for(int i = 0; i < myTeamArray.size();i++){
            TestCase = myTeamArray.get(i).eventArray[selectedEventCombo.getSelectedIndex()];
            eventTable.setValueAt(TestCase.eventPoints, i, 1);
            eventTable.setValueAt(TestCase.eventScore, i, 2);
        }
    }//GEN-LAST:event_selectedEventComboActionPerformed

    private void selectedGameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedGameComboActionPerformed
       int Selected_Game = selectedGameCombo.getSelectedIndex();
        //gets the int type of our game type and then converts our selected index
        //to it
        for (game_type type : game_type.values()){
            if(type.ordinal() == Selected_Game){
                for(int i = 0;i < myTeamArray.size();i++){
                    myTeamArray.get(i).eventArray[selectedEventCombo.getSelectedIndex()].GameType = type;
                }
            }
        }
    }//GEN-LAST:event_selectedGameComboActionPerformed

    private void eventTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_eventTablePropertyChange
        
        int SelectedIndex =     selectedEventCombo.getSelectedIndex (),
        SelectedRow       =     eventTable        .getSelectedRow   (),
        SelectedColum     =     eventTable        .getSelectedColumn(),
        ColumCount        =     eventTable        .getColumnCount   (),
        RowCount          =     eventTable        .getRowCount      ();
        
        if(ColumCount > 0 && RowCount > 0){
            if(eventTable.getValueAt(SelectedRow, SelectedColum) != null
                && SelectedColum == 1){
                myTeamArray.get(SelectedRow).eventArray[SelectedIndex].eventPoints = (long)eventTable.getValueAt(SelectedRow, SelectedColum);
                myTeamArray.get(SelectedRow).eventArray[SelectedIndex].calculateScore(eventTable);
            }
        }
    }//GEN-LAST:event_eventTablePropertyChange

    private void addTeamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTeamButtonActionPerformed
        PostTeamData();
    }//GEN-LAST:event_addTeamButtonActionPerformed

    private void removeTeamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTeamButtonActionPerformed
        int selected = teamComboBox.getSelectedIndex();
        if(selected >= 0){
            myTeamArray.remove(selected);
            teamComboBox.removeItemAt(selected);
            javax.swing.table.DefaultTableModel tableModel = (javax.swing.table.DefaultTableModel)eventTable.getModel();
            tableModel.removeRow(selected);
        }
    }//GEN-LAST:event_removeTeamButtonActionPerformed

    private void teamComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamComboBoxActionPerformed
        int selected = teamComboBox.getSelectedIndex();
        //checks if ive just removed a team and now its null
        if(selected >= 0){
            TeamClass selectedTeam = myTeamArray.get(selected);
            isGuestCheckbox.setSelected(selectedTeam.is_guest);
            selectedTeamLabel.setText(selectedTeam.teamName+"'s Players");
            bioLabel.setText(selectedTeam.teamName+"'s Bio");
            editBioTextArea.setText(selectedTeam.teamBio);
            DefaultListModel ListModel = (DefaultListModel)teamPlayerList.getModel();
            ListModel.clear();
            if(selectedTeam.playersData.size() > 0){
                for(int i = 0; i < selectedTeam.playersData.size(); i++){
                    ListModel.addElement(selectedTeam.playersData.get(i).playerName);
                }
            }
        } 
    }//GEN-LAST:event_teamComboBoxActionPerformed

    private void teamNameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_teamNameFieldMouseClicked
        teamNameField.setText("");
    }//GEN-LAST:event_teamNameFieldMouseClicked

    private void teamNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamNameFieldActionPerformed
        PostTeamData();
    }//GEN-LAST:event_teamNameFieldActionPerformed

    private void playerNameTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerNameTextFieldMouseClicked
        playerNameTextField.setText("");
    }//GEN-LAST:event_playerNameTextFieldMouseClicked

    private void playerNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerNameTextFieldActionPerformed
        postPlayerNameData();
    }//GEN-LAST:event_playerNameTextFieldActionPerformed

    private void addTeamPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTeamPlayerButtonActionPerformed
        postPlayerNameData();
    }//GEN-LAST:event_addTeamPlayerButtonActionPerformed

    private void removeTeamPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTeamPlayerButtonActionPerformed
int selectedTeam = teamComboBox.getSelectedIndex();
        if(selectedTeam == -1){
            System.out.println("please select a Team");
        }
        else if(selectedTeam >= 0){
            DefaultListModel ListModel = (DefaultListModel)teamPlayerList.getModel();
            if(teamPlayerList.getSelectedIndex() >= 0){
                ListModel.removeElementAt(teamPlayerList.getSelectedIndex());
                myTeamArray.get(teamComboBox.getSelectedIndex()).playersData.remove(0);
            }

        }
    }//GEN-LAST:event_removeTeamPlayerButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        SaveData("Data.dat");
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        LoadData("Data.dat");
    }//GEN-LAST:event_loadButtonActionPerformed

    private void scoreboardMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scoreboardMenuMouseClicked
       eventsPanel.setVisible(false);
        teamPanel.setVisible(false);
        teamInfoPanel.setVisible(false);
        //seting this up so its modular :)
        //and so when things get rearranged it will not delete the wrong one.
        //this can be solved by using hasmaps but at the time of writing the myTeamArray
        //i forgot that java had them
        scoreTable.setModel(new javax.swing.table.DefaultTableModel(new Object [][] {},
                new String [] {
                    "Team", "Event 1", "Event 2", "Event 3", "Event 4", "Event 5", "Total", "Posistion"
                }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        javax.swing.table.DefaultTableModel tableModel = (javax.swing.table.DefaultTableModel)scoreTable.getModel();
        for(int i = 0; i < myTeamArray.size();i++){
            TeamClass team = myTeamArray.get(i);
             tableModel.addRow(new Object[]{team.teamName,
                    team.eventArray[0].eventScore,
                    team.eventArray[1].eventScore,
                    team.eventArray[2].eventScore,
                    team.eventArray[3].eventScore,
                    team.eventArray[4].eventScore,
                    team.overallScore,
                    team.scoreboardPos
                });
        }
        scorePanel.setVisible(true);
    }//GEN-LAST:event_scoreboardMenuMouseClicked

    private void eventMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventMenuMouseClicked
        teamPanel.setVisible(false);
        scorePanel.setVisible(false);
        teamInfoPanel.setVisible(false);
        String Selected_event = (String)selectedEventCombo.getSelectedItem();
        eventLabel.setText(Selected_event); 
        eventsPanel.setVisible(true);
    }//GEN-LAST:event_eventMenuMouseClicked

    private void editTeamDataItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTeamDataItemActionPerformed
        eventsPanel.setVisible(false);
        teamPanel.setVisible(true);
        scorePanel.setVisible(false);
        teamInfoPanel.setVisible(false);
    }//GEN-LAST:event_editTeamDataItemActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        javax.swing.tree.TreePath treePath = jTree1.getSelectionPath();
        if(treePath == null){
            return;
        }
        String selectedPath = jTree1.getSelectionPath().toString();
        if(selectedPath.contains("[Teams]")){
            jTextArea1.setText("");
            return;
        }
        for(TeamClass teamCheck : myTeamArray){
            if(selectedPath.contains(teamCheck.teamName)){
                jTextArea1.setText(teamCheck.teamBio);
            }  
        }
    }//GEN-LAST:event_jTree1ValueChanged

    private void calculateWinnerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateWinnerButtonActionPerformed

        updateAllOverallScores();
        javax.swing.table.DefaultTableModel test = (javax.swing.table.DefaultTableModel)scoreTable.getModel();
        HashMap<Integer, Integer> OverallScore = new HashMap<Integer, Integer>();
        
        for (int i =0;i < myTeamArray.size();i++){
            OverallScore.put(myTeamArray.get(i).overallScore,i);
        }
        
        int indexz=0;
        TreeMap<Integer, Integer> sorted = new TreeMap<>(OverallScore); 
        TreeMap<Integer,Integer> reversedSortedMap = new TreeMap<Integer,Integer>(Collections.reverseOrder());
        reversedSortedMap.putAll(sorted);
        Set<Entry<Integer, Integer>> mappings = reversedSortedMap.entrySet();
        
        for(Entry<Integer, Integer> mapping : mappings){
            indexz++;
            myTeamArray.get(mapping.getValue()).scoreboardPos = indexz;
        }
        for(int i = 0; i < myTeamArray.size();i++){
            TeamClass team = myTeamArray.get(i);
            scoreTable.setValueAt(team.overallScore,i,6);
            scoreTable.setValueAt(team.scoreboardPos, i, 7);               
            for(Entry<Integer, Integer> mapping : mappings){
                if(myTeamArray.get(mapping.getValue()).scoreboardPos == 1){
                    jLabel2.setText(myTeamArray.get(mapping.getValue()).teamName + " is the winner!!!");
                    jLabel2.setVisible(true);
                    showWinner();
                    break;
                }
            }                  
        }         
    }//GEN-LAST:event_calculateWinnerButtonActionPerformed

    private void editBioTextAreaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editBioTextAreaFocusLost
       int selected = teamComboBox.getSelectedIndex();
        //checks if ive just removed a team and now its null
        if(selected >= 0){
            myTeamArray.get(selected).teamBio=editBioTextArea.getText();
        }
    }//GEN-LAST:event_editBioTextAreaFocusLost
    
    static ScheduledExecutorService service;
    static int counter = 0;
    void showWinner(){

        Runnable runnable = new Runnable() {
            public void run() {
                // task to run goes here
                if (counter++ >= 6) {
                    service.shutdown();
                    counter = 0;
                } else {
                    if (counter % 2 == 1) {
                        jLabel2.setForeground(Color.red);
                    } else {
                        jLabel2.setForeground(Color.blue);
                    }
                }
            }
        };
        service = Executors.newSingleThreadScheduledExecutor();
        service.scheduleAtFixedRate(runnable, 0, 500, TimeUnit.MILLISECONDS);
        
        
    }
    /**
     * @param args the command line arguments
     */
     public static void main(String args[]) {

        //sets the look and feel
         try {
                javax.swing.UIManager.setLookAndFeel("com.formdev.flatlaf.FlatDarkLaf");
            } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
           esportsFrame MainFrame = new esportsFrame();
           MainFrame.jLabel2.setVisible(false);
           MainFrame.eventsPanel.setVisible(false);
           MainFrame.teamPanel.setVisible(false);
           MainFrame.teamInfoPanel.setVisible(false);
           MainFrame.scorePanel.setVisible(true);
           MainFrame.setVisible(true);
         });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScoreScrollPane;
    private javax.swing.JButton addTeamButton;
    private javax.swing.JButton addTeamPlayerButton;
    private javax.swing.JLabel bioLabel;
    private javax.swing.JButton calculateWinnerButton;
    private javax.swing.JTextArea editBioTextArea;
    private javax.swing.JMenuItem editTeamDataItem;
    private javax.swing.JLabel eventLabel;
    private javax.swing.JMenu eventMenu;
    private javax.swing.JTable eventTable;
    private javax.swing.JPanel eventsPanel;
    private javax.swing.JScrollPane eventsScrollPane;
    private javax.swing.JCheckBox isGuestCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    private javax.swing.JButton loadButton;
    private javax.swing.JTextField playerNameTextField;
    private javax.swing.JButton removeTeamButton;
    private javax.swing.JButton removeTeamPlayerButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel scorePanel;
    private javax.swing.JTable scoreTable;
    private javax.swing.JMenu scoreboardMenu;
    private javax.swing.JComboBox<String> selectedEventCombo;
    private javax.swing.JComboBox<String> selectedGameCombo;
    private javax.swing.JLabel selectedTeamLabel;
    private javax.swing.JComboBox<String> teamComboBox;
    private javax.swing.JPanel teamInfoPanel;
    private javax.swing.JTextField teamNameField;
    private javax.swing.JPanel teamPanel;
    private javax.swing.JList<String> teamPlayerList;
    private javax.swing.JMenu teamsMenu;
    private javax.swing.JMenuItem viewTeamDataItem;
    // End of variables declaration//GEN-END:variables
}
